# 思路

## 思路一：

暴力求解：不管三七二十一，直接for循环到底，最外层for循环用于“中间位置”的右移，里层for循环用于计算对于当前中间位置的而言左右两边的数组数值之和。代码就不贴了，比较简单。

## 思路二：

先计算数组的总和，然后for循环右移，每一次右移之后都将左边的数值加上上一次中间位置的值，右边则减去上一轮中间位置的值，贴一下官方的参考代码：

* java

```java
public int findMiddleIndex(int[] nums) {

        int l = 0;
        int r = 0;

        for (int i = 0; i < nums.length; i++) {
            r += num[i];
        }

        for(int i = 0; i < nums.length; i++){
            if(i != 0){
                l += nums[i - 1];
            }
            r -= nums[i];

            if(l == r){
                return i;
            }
        }
        return -1;
    }
```

现在看上去已经是最快的方法了（实际上也应该是最快的方法了），但是我们还可以对代码做出一点点小小的改进，将for循环改为增强for循环。改动之后的代码如下：

* java

```java
    /**
     * 我改写的，比原先的要快
     * 执行结果：通过
     * 显示详情
     * 查看示例代码
     * 添加备注
     * 执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗：39.5 MB, 在所有 Java 提交中击败了86.47%的用户
     * 通过测试用例：294 / 294
     * @param nums  被查数组
     * @return  数组左右值相等的中间位置
     */
    public int findMiddleIndex(int[] nums) {

        int l = 0;
        int r = 0;

        for (int num : nums) {
            r += num;
        }

        for(int i = 0; i < nums.length; i++){
            if(i != 0){
                l += nums[i - 1];
            }
            r -= nums[i];

            if(l == r){
                return i;
            }
        }
        return -1;
    }
```

比参考的代码还快，我很满意。
- 以上就是我的全部内容了，欢迎大佬的指点，我也在把每天写的代码都传到Github账号了，也欢迎大家关注我的[github账号](https://github.com/PlutoCtx)

